{% extends "base.twig" %}

{% set docs = {
    title: 'Sass',
    text: 'Sass is an extension of CSS, adding nested rules, variables, mixins, selector inheritance, and more. It\'s translated to well-formatted, standard CSS using the command line tool or a web-framework plugin.',
    bootstrap: 'getting-started/theming',
    blocks: [
        {
            title: 'Introduction',
            text: 'If you have never used SCSS before, check out the language features and <a href="https://sass-lang.com/guide" target="_blank">documentation</a>. Now, theming is accomplished by Sass variables, Sass maps, and custom CSS. When working with the Gameforest SCSS sources, We have a few recommendations.',
        },
        {
            title: 'Customization',
            text: 'Whenever possible, avoid modifying Gameforest’s core files. For Sass, that means creating your own stylesheet that imports Gameforest so you can modify and extend it. Scss files are included in src folder like this:',
            copy: false,
            pre: 'gameforest/
└── src/
    └── sass
        └── custom
            └── _theme.scss
            └── _variables.scss',
            custom: '<p class="mt-4">Add your custom variables to the <code>custom/_variables.scss</code> file and custom classes or imports from <code>custom/_theme.scss</code> file. When a new update has been released then don\'t overwrite these files.</p>'
        },
        {
            title: 'Variables',
            text: 'A lot of customization is possible by simply overwriting the values of already declared variables. You can find all variables for each component inside their SCSS files of the variables.scss file and override them in your theme. You can also add your own custom variables by adding it to custom/_variables.scss',
            copy: false,
            pre: 'gameforest/
└── src/
    └── sass
        └── custom
            └── _variables.scss
        └── _variables.scss',
            custom: '<p class="my-4 pt-2">We can find pre defined variables in the _variables.scss just like below.</p>
            <pre><code class="scss">// Primary Color
$primary: #2575dc !default;</code></pre>
            <p class="mt-4 pt-2">If we would like to modify a pre defined variable then just look for the right variable in _variables.scss and add it with choosen option to the _custom.scss file without the <code>!default</code> parameter like this:</p>
            <pre><code class="scss">// Primary Color
$primary: #6db124;</code></pre>
            <p class="mt-4 mb-3">After save we are ready to run the gulp task and css files will be modified.</p><br>
            <div class="alert alert-warning p-3"><strong>Notice:</strong> in order to see the result of modification what you have made before, it\'s required to run gulp task. Learn more about gulp go the dedicated page that can be found in the sidebar.</div>
            '
        },
        {
            title: 'Plugins',
            text: 'It\'s fine when you would like to use custom 3rd party plugins with scss and node_modules. Below you can find an example how to import plugins scss as a node_module.',
            custom: '<pre><code class="scss">@import "../../node_modules/owl.carousel/src/scss/owl.carousel";</code></pre>
            <p class="mt-4 pt-2">It is also required to add the plugin to the dependencies by using yarn or npm install command in terminal.</p>'
        }
    ]
} %}
